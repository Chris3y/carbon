// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select does not apply any events if disabled or readonly 1`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select does not apply any events if disabled or readonly 2`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select renders only the InputDecoratorBridge when closed 1`] = `
<Fragment>
  <InputDecoratorBridge
    className="carbon-select"
    formattedValue=""
    inputIcon="dropdown"
    inputRef={[Function]}
    leftChildren={false}
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
  />
</Fragment>
`;

exports[`Select renders the SelectList with any given children when in an open state 1`] = `
Object {
  "alwaysHighlight": false,
  "children": Array [
    <div>
      1
    </div>,
    <div>
      2
    </div>,
    <div>
      3
    </div>,
  ],
  "customFilter": undefined,
  "filterValue": undefined,
  "onMouseEnter": [Function],
  "onMouseLeave": [Function],
  "onSelect": [Function],
  "open": true,
  "target": .c0 {
  color: rgba(0,0,0,0.9);
  background: transparent;
  line-height: 16px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  cursor: text;
  margin: 0px;
  min-height: 32px;
  border: 1px solid #CCD6DA;
  outline: 3px solid #FFB500;
  height: 48px;
  font-size: 16px;
  padding-left: 13px;
  padding-right: 13px;
  width: 256px;
}

.c1 {
  border: none;
  background: transparent;
  outline: none;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  width: 30px;
  color: rgba(0,0,0,0.85);
  font-size: 14px;
}

<div
    autocomplete="off"
    class="carbon-input-presentation carbon-input-presentation--has-focus c0"
    data-element="input"
    id="guid-12345"
    role="presentation"
    type="text"
    value=""
  >
    <input
      autocomplete="off"
      class="c1"
      data-element="input"
      id="guid-12345"
      value=""
    />
    <span
      data-portal-entrance="guid-12345"
    />
  </div>,
}
`;

exports[`Select when multi-value renders the the textbox with the following:
        * formattedValue is empty
        * value contains the array of values
        * leftChildren contains the pills
        * inputIcon is disabled
        * placeholder is disabled 1`] = `
Array [
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
    >
      Orange
    </Pill>
  </div>,
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
    >
      Blue
    </Pill>
  </div>,
  <div
    className="carbon-select__pill"
  >
    <Pill
      as="default"
      className=""
      fill={false}
      onClick={null}
      onDelete={[Function]}
    >
      Red
    </Pill>
  </div>,
]
`;
